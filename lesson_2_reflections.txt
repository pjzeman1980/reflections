What happens when you initialize a repository? Why do you need to do it?

Initializing the repository creates the .git folder and sets up the repo and master branch in preparation for version tracking.  The repo needs to be initialized to set up the necessary files that will allow for future tracking.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is like a bridge between your working directory and the repository.  It allows you collect a number of changes that can be committed as one revision.  It also allows you the ability to continue working on some changes while only staging and ultimately committing the changes you desire.

How can you use the staging area to make sure you have one commit per logical change?

You can add any number of files in order to capture a single logical change in the staging area.  You can also choose not to add certain changes to the staging area if they are not part of the logical change.  

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches can help to label certain key points in development and major feature changes.  Branches are also helpful for keeping features and enhancements organized since each branch encapsulates a single feature as it changes over multiple commits.

How do the diagrams help you visualize the branch structure?

The diagrams provide easy visualization of branch ancestry so becomes much easier to track the history and evolution of the repository over time.  By looking at the diagram you can quickly see the common ancestors and identify merge points.  The diagrams also make it easy to see which commits belong to which branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When two branches are merged together, all of the changes that have occurred in each branch since they diverged are merged back together into a single branch.  On the diagram, the two branches rejoin indicating that the changes are brought back together again into a single set.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Doing manual merging is time consuming and error prone - automatic merging solves this.  One negative however, is that the merge will automatically include all changes in both branches as long as they don't conflict.  That may not be what is desired - say user A makes an addition that makes use of an existing function.  If user B changes that functions behavior, it may be incompatible with user A's changes.  In this case, user B's change may not be desired since it breaks user A's additions. 
